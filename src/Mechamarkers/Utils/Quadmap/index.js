import { vecSub, vecMag, vecMag2, vecDot } from '../Vec2';

// normalized based on image height

// const IMGW = 960;
// const IMGH = 540;

// const IMGW = 1120;
// const IMGH = 630;

const IMGW = 1280;
const IMGH = 720;

// const IMGW = 1920;
// const IMGH = 1080;

// paste calibration data into QUADS_CALIBRATED and CELLS_CALIBRATED
const QUADS_CALIBRATED = [[{"x":0.0549686112387077,"y":0.13718018508437668},{"x":0.06094013167968152,"y":0.29368535655960804},{"x":0.07288317256162914,"y":0.4450190528034839},{"x":0.08987903843209309,"y":0.5892759934676103},{"x":0.11039657020364416,"y":0.7188350571584105},{"x":0.13275149288011026,"y":0.8334240609689711},{"x":0.15525953146531923,"y":0.9324986390854655}],[{"x":0.10595620885009953,"y":0.11377245508982035},{"x":0.11100903383861584,"y":0.2795318454001089},{"x":0.12264584290307763,"y":0.4422972237343495},{"x":0.13948859286479864,"y":0.5933587370713119},{"x":0.15924054509263513,"y":0.7297223734349483},{"x":0.18098300413412954,"y":0.8473053892215568},{"x":0.20272546317562395,"y":0.9491017964071856}],[{"x":0.1665901087122952,"y":0.09009254218835057},{"x":0.17026489052212526,"y":0.26646706586826346},{"x":0.18098300413412954,"y":0.43848666303756123},{"x":0.19690705864339306,"y":0.5988023952095808},{"x":0.21543408360128619,"y":0.7397931409907458},{"x":0.2348798040116368,"y":0.8611867174741427},{"x":0.2541724085132445,"y":0.9635274904735982}],[{"x":0.23671719491655183,"y":0.0688622754491018},{"x":0.2399326290001531,"y":0.2542188350571584},{"x":0.2491195835247282,"y":0.4357648339684268},{"x":0.26244066758536216,"y":0.6028851388132825},{"x":0.2788240698208544,"y":0.7482308111050626},{"x":0.2953605879650896,"y":0.8731627653783343},{"x":0.3111315265656101,"y":0.9763200870985302}],[{"x":0.3175623947328127,"y":0.05144256940664126},{"x":0.3197060174552136,"y":0.24387588459444748},{"x":0.32674934925738786,"y":0.4327708219923789},{"x":0.3365487674169346,"y":0.6066956995100707},{"x":0.3487980401163681,"y":0.756396298312466},{"x":0.36089419690705865,"y":0.8818726183995645},{"x":0.3728372377890063,"y":0.9858464888405009}],[{"x":0.40682896952993414,"y":0.038922155688622756},{"x":0.4079007808911346,"y":0.23679912901469788},{"x":0.41142244679222173,"y":0.4308655416439848},{"x":0.41754708314193845,"y":0.6077844311377245},{"x":0.42413106721788396,"y":0.7602068590092542},{"x":0.43086816720257237,"y":0.88704409363092},{"x":0.437145919461032,"y":0.9918345127925966}],[{"x":0.5014546011330577,"y":0.03429504627109418},{"x":0.5011483693155719,"y":0.23407729994556342},{"x":0.5013014852243148,"y":0.43004899292324444},{"x":0.5016077170418006,"y":0.6088731627653783},{"x":0.5023732965855151,"y":0.7623843222645618},{"x":0.5029857602204868,"y":0.8903102885138813},{"x":0.5035982238554585,"y":0.9940119760479041}],[{"x":0.5960802327361813,"y":0.03810560696788242},{"x":0.5948553054662379,"y":0.23598258029395755},{"x":0.5911805236564078,"y":0.4303211758301579},{"x":0.5865870463941204,"y":0.6077844311377245},{"x":0.5809217577706324,"y":0.7607512248230811},{"x":0.5755627009646302,"y":0.8878606423516603},{"x":0.5698974123411423,"y":0.9926510615133369}],[{"x":0.6868779666207319,"y":0.0492651061513337},{"x":0.6839687643546164,"y":0.24251497005988024},{"x":0.677384780278671,"y":0.432226456178552},{"x":0.6675853621191242,"y":0.6061513336962439},{"x":0.6570203644158628,"y":0.7561241154055526},{"x":0.6455366712601439,"y":0.8813282525857377},{"x":0.6351247894656255,"y":0.9861186717474143}],[{"x":0.7686418618894503,"y":0.06668481219379421},{"x":0.7648139641708773,"y":0.2523135547087643},{"x":0.7553207778288165,"y":0.4341317365269461},{"x":0.7426121574031542,"y":0.6015242242787153},{"x":0.7274536824376052,"y":0.7485029940119761},{"x":0.7118358597458276,"y":0.8726183995645074},{"x":0.6966773847802786,"y":0.9760479041916168}],[{"x":0.8406063389986219,"y":0.0884594447468699},{"x":0.8357066299188486,"y":0.26374523679912903},{"x":0.8251416322155872,"y":0.4368535655960806},{"x":0.8095238095238095,"y":0.5974414806750136},{"x":0.7919154800183739,"y":0.7392487751769189},{"x":0.7727759914255091,"y":0.8603701687534023},{"x":0.7545551982851019,"y":0.9632553075666848}],[{"x":0.9020058184045322,"y":0.11077844311377245},{"x":0.8966467615985301,"y":0.2768100163309744},{"x":0.8845506048078395,"y":0.43984757757212845},{"x":0.8678609707548615,"y":0.5911812738160044},{"x":0.8484152503445108,"y":0.7275449101796407},{"x":0.8277446026642168,"y":0.8470332063146434},{"x":0.806767723166437,"y":0.947468698965705}],[{"x":0.9534527637421528,"y":0.1336418072945019},{"x":0.9476343592099219,"y":0.2896026129559064},{"x":0.9356913183279743,"y":0.4428415895481764},{"x":0.9190016842749962,"y":0.5862819814915623},{"x":0.898790384320931,"y":0.7172019597169298},{"x":0.8765885775532077,"y":0.8320631464344039},{"x":0.8551523503291992,"y":0.9314099074578116}]];
const CELLS_CALIBRATED = [[{"x":31,"y":698},{"x":31,"y":588},{"x":31,"y":478},{"x":31,"y":368},{"x":31,"y":258},{"x":31,"y":148},{"x":31,"y":38}],[{"x":120,"y":698},{"x":120,"y":588},{"x":120,"y":478},{"x":120,"y":368},{"x":120,"y":258},{"x":120,"y":148},{"x":120,"y":38}],[{"x":209,"y":698},{"x":209,"y":588},{"x":209,"y":478},{"x":209,"y":368},{"x":209,"y":258},{"x":209,"y":148},{"x":209,"y":38}],[{"x":298,"y":698},{"x":298,"y":588},{"x":298,"y":478},{"x":298,"y":368},{"x":298,"y":258},{"x":298,"y":148},{"x":298,"y":38}],[{"x":387,"y":698},{"x":387,"y":588},{"x":387,"y":478},{"x":387,"y":368},{"x":387,"y":258},{"x":387,"y":148},{"x":387,"y":38}],[{"x":476,"y":698},{"x":476,"y":588},{"x":476,"y":478},{"x":476,"y":368},{"x":476,"y":258},{"x":476,"y":148},{"x":476,"y":38}],[{"x":565,"y":698},{"x":565,"y":588},{"x":565,"y":478},{"x":565,"y":368},{"x":565,"y":258},{"x":565,"y":148},{"x":565,"y":38}],[{"x":654,"y":698},{"x":654,"y":588},{"x":654,"y":478},{"x":654,"y":368},{"x":654,"y":258},{"x":654,"y":148},{"x":654,"y":38}],[{"x":743,"y":698},{"x":743,"y":588},{"x":743,"y":478},{"x":743,"y":368},{"x":743,"y":258},{"x":743,"y":148},{"x":743,"y":38}],[{"x":832,"y":698},{"x":832,"y":588},{"x":832,"y":478},{"x":832,"y":368},{"x":832,"y":258},{"x":832,"y":148},{"x":832,"y":38}],[{"x":921,"y":698},{"x":921,"y":588},{"x":921,"y":478},{"x":921,"y":368},{"x":921,"y":258},{"x":921,"y":148},{"x":921,"y":38}],[{"x":1010,"y":698},{"x":1010,"y":588},{"x":1010,"y":478},{"x":1010,"y":368},{"x":1010,"y":258},{"x":1010,"y":148},{"x":1010,"y":38}],[{"x":1099,"y":698},{"x":1099,"y":588},{"x":1099,"y":478},{"x":1099,"y":368},{"x":1099,"y":258},{"x":1099,"y":148},{"x":1099,"y":38}]];

const QUADSNORM = generateQuads(QUADS_CALIBRATED);

const QUADS = QUADSNORM.map(
  subset => subset.map(
    q => ({
      x: q.x * IMGW,
      y: q.y * IMGH,
    })
  )
);

const CELLS = generateQuads(CELLS_CALIBRATED);

const CELLS_SIMPLE = CELLS.map(c => ({
  corner: c[0],
  w: c[2].x - c[0].x,
  h: c[2].y - c[0].y,
}));




function generateQuads(q) {
  var a0 = shiftArray2D(q, -1, -1);
  var a1 = shiftArray2D(q, 1, -1);
  var a2 = shiftArray2D(q, 1, 1);
  var a3 = shiftArray2D(q, -1, 1);
  var quadArr = [];
  for (var i=0; i<a0.length; i++) {
    for (var j=0; j<a0[i].length; j++) {
      var temparr = [];
      temparr.push(a0[i][j]);
      temparr.push(a1[i][j]);
      temparr.push(a2[i][j]);
      temparr.push(a3[i][j]);
      quadArr.push(temparr);
    }
  }
  return quadArr;
}

function shiftArray(arr, index) {
  var newarr = [];
  if (index > 0) {
    for (var i=index; i<arr.length; i++) {
      newarr.push(arr[i]);
    }
  } else if (index < 0) {
    for (var i=0; i<arr.length+index; i++) {
      newarr.push(arr[i]);
    }
  }
  return newarr;
}

function shiftArray2D(arr, index1, index2) {
  var newarr = arr.map( a => shiftArray(a, index2));
  newarr = shiftArray(newarr, index1);
  return newarr;
}


// edge length from right angle triangle
function lenFromRATri(hyp, len) {
  return Math.pow(Math.pow(hyp, 2) - Math.pow(len, 2), 0.5);
}

// Line closest point
function lineCP(sP, eP, pt) {
  var sToPt = vecSub(sP, pt);
  var sToE = vecSub(sP, eP);
  var magSE = vecMag2(sToE);
  var t = vecDot(sToPt, sToE) / magSE;
  return {x: sP.x + sToE.x*t, y: sP.y + sToE.y*t};
}

// memoize this
function areaTriangle(p0, p1, p2) {
  return Math.abs(p0.x*(p1.y - p2.y) + p1.x*(p2.y - p0.y) + p2.x*(p0.y - p1.y))/2
}
// End Vector lib

function ptInQuad(pt, quadArr) {
  var quadArea = areaTriangle(quadArr[0], quadArr[1], quadArr[2]) + areaTriangle(quadArr[0], quadArr[2], quadArr[3]);
  var ptArea = 0;
  for (var i=0; i<quadArr.length; i++) {
      ptArea = ptArea + areaTriangle(pt, quadArr[i], quadArr[(i+1)%quadArr.length]);
  }
  var ratio = ptArea / quadArea;
  if (ratio <= 1.0001) {
      return true;
  } else {
      return false;
  }
}

const xaxis = {x:1, y:0};
const yaxis = {x:0, y:1};
const xaxisNeg = {x:-1, y:0};
const yaxisNeg = {x:0, y:-1};

function mapQuad(pt, quadArr) {
  // https://math.stackexchange.com/questions/13404/mapping-irregular-quadrilateral-to-a-rectangle
  const p0 = quadArr[0];
  const p1 = quadArr[1];
  const p2 = quadArr[2];
  const p3 = quadArr[3];
  const dU0 = vecMag(vecSub(lineCP(p0, p3, pt), pt));
  const dU1 = vecMag(vecSub(lineCP(p1, p2, pt), pt));
  const u = dU0 / (dU0 + dU1);
  const dV0 = vecMag(vecSub(lineCP(p0, p1, pt), pt));
  const dV1 = vecMag(vecSub(lineCP(p3, p2, pt), pt));
  const v = dV0 / (dV0 + dV1);

  return {u:u, v:v};
}

export function mapPointToUV(pt) {
  const quadindex = QUADS.findIndex(q => ptInQuad(pt, q));
  const quad = QUADS[quadindex];

  if (quad) {
    return {
      uv: mapQuad(pt, quad),
      uvindex: quadindex,
    };
  }
  // console.warn('Cannot find quad for given point in: mapPointToUV') // PETER CODE LAGS AROUND HERE
  // Probs should throw error
  return undefined;
}

export function mapUVtoCellCoord(pt) {
  // Bail if point is undefined
  if (!pt) return undefined;

  const cell = CELLS_SIMPLE[pt.uvindex];

  return {
    x: cell.corner.x + (pt.uv.u * cell.w),
    y: cell.corner.y + (pt.uv.v * cell.h),
  };
}
